#include <iostream>
#define MAX 20//we can inserted easily 20 offices
#define INF 9999//INF infinite value 

using namespace std;

// Declare global variables
int cost[MAX][MAX];  // 2D array to store the costs of connecting offices
int visited[MAX];    // Array to mark whether an office is visited during Prim's algorithm
string names[MAX];   // Array to store the names of offices (strings)

int prim(int n) {
    int total = 0, edges = 0;  // total will store the sum of the costs of the MST, edges will count the number of edges included
    visited[0] = 1;  // Start from the first office (mark it as visited)

    // Continue until we have n-1 edges in the MST (since a tree with n nodes has n-1 edges)
    while (edges < n - 1) {
        int min = INF, a = -1, b = -1;  // Initialize minimum cost as INF, and a and b to -1 (indicating no valid edge yet)

        // Iterate over all nodes (offices) in the graph
        for (int i = 0; i < n; i++) {
            // If the office i is visited, explore all its unvisited neighbors
            if (visited[i]) {
                for (int j = 0; j < n; j++) {
                    // Check if office j is unvisited and there's a connection (i.e., cost < INF)
                    if (!visited[j] && cost[i][j] < min) {
                        min = cost[i][j];  // Update the minimum cost
                        a = i;             // Set a to the current office i
                        b = j;             // Set b to the connected office j
                    }
                }
            }
        }

        // If a valid edge is found (i.e., a != -1 and b != -1), include it in the MST
        if (a != -1 && b != -1) {
            // Output the edge selected and its cost
            cout << "Edge " << edges + 1 << ": " << names[a] << " - " << names[b] << " Cost: " << cost[a][b] << "\n";
            total += cost[a][b];  // Add the cost of this edge to the total MST cost
            visited[b] = 1;        // Mark the connected office b as visited
            edges++;               // Increment the count of edges added to the MST
        }
    }

    return total;  // Return the total cost of the MST
}

int main() {
    int n;  // Variable to store the number of offices (nodes)
    
    cout << "Enter number of offices: ";
    cin >> n;  // Take input for number of offices (nodes)

    // Input names of offices
    cout << "Enter names of offices (one capital letter each):\n";
    for (int i = 0; i < n; i++) {
        cin >> names[i];   // Store each office name in the names array
        visited[i] = 0;    // Mark all offices as unvisited initially
        for (int j = 0; j < n; j++)
            cost[i][j] = INF;  // Initialize the cost matrix with INF (indicating no connection between offices)
    }

    // Input connection costs between offices
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            char ans;
            cout << "Are " << names[i] << " and " << names[j] << " connected? (y/n): ";
            cin >> ans;  // Ask if there's a direct connection between offices i and j
            if (ans == 'y' || ans == 'Y') {
                int c;
                cout << "Enter cost to connect " << names[i] << " and " << names[j] << ": ";
                cin >> c;  // Input the cost of connecting these two offices
                cost[i][j] = cost[j][i] = c;  // Store the connection cost in both directions (since it's an undirected graph)
            }
        }
    }

    // Run Prim's algorithm to find the Minimum Spanning Tree (MST)
    int minCost = prim(n);

    // Output the total cost of the MST
    cout << "\nMinimum Total Cost to Connect All Offices: " << minCost << "\n";
    return 0;  // End of the program
}
